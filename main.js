/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DictionaryDev
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var dictionary_terms = [];
var excluded_chars = [" ", ".", "!", "?", "#", "$", "@", "%", "^", "&", "*", "(", ")", "[", "]", "{", "}", ";", ":", "'", '"', ",", "/", "<", ">", "~", "`", "+"];
var dictionary_name = "Dictionary";
var DEFAULT_SETTINGS = {
  something: "FooBar"
};
var levenshteinDistance = (first, second) => {
  if (first.length === 0 || second.length === 0) {
    return Math.abs(first.length - second.length);
  }
  let levenshtein_matrix = [];
  let i = 0;
  for (i; i <= second.length; ++i) {
    levenshtein_matrix[i] = [i];
  }
  let j = 0;
  for (j; j <= first.length; ++j) {
    levenshtein_matrix[0][j] = j;
  }
  for (i = 1; i <= second.length; ++i) {
    for (j = 1; j <= first.length; ++j) {
      if (second.at(i - 1) === first.at(j - 1)) {
        levenshtein_matrix[i][j] = levenshtein_matrix[i - 1][j - 1];
      } else {
        levenshtein_matrix[i][j] = Math.min(
          levenshtein_matrix[i - 1][j - 1] + 1,
          //Substitution of a char
          Math.min(
            levenshtein_matrix[i][j - 1] + 1,
            //Insertion of a char
            levenshtein_matrix[i - 1][j] + 1
          )
        );
      }
    }
  }
  return levenshtein_matrix[second.length][first.length];
};
var DictionaryDevAutocomplete = class extends import_obsidian.EditorSuggest {
  onTrigger(cursor, editor, file) {
    const line = editor.getLine(cursor.line);
    if (line.length <= 0) {
      return null;
    }
    const position = editor.getCursor("from");
    if (excluded_chars.contains(line.at(position.ch - 1))) {
      return null;
    }
    let start_index = 0, end_index = line.length;
    for (let i = position.ch - 1; i >= 0; --i) {
      if (excluded_chars.contains(line.at(i))) {
        start_index = i + 1;
        break;
      }
    }
    for (let i = position.ch - 1; i < line.length; ++i) {
      if (excluded_chars.contains(line.at(i))) {
        end_index = i;
        break;
      }
    }
    if (end_index - start_index <= 1) {
      return null;
    }
    return {
      start: { line: cursor.line, ch: start_index },
      end: { line: cursor.line, ch: end_index },
      query: line.substring(start_index, end_index)
    };
  }
  getSuggestions(context) {
    return new Promise((resolve, reject) => {
      const query = context.query.toUpperCase();
      let regex = new RegExp(query);
      resolve(dictionary_terms.filter((term) => {
        if (term.toUpperCase().match(regex)) {
          return term;
        }
      }).sort((smaller, bigger) => {
        return levenshteinDistance(smaller.toUpperCase(), query) - levenshteinDistance(bigger.toUpperCase(), query);
      }));
    });
  }
  renderSuggestion(value, el) {
    el.appendText(value);
  }
  selectSuggestion(value, evt) {
    var _a, _b, _c, _d, _e, _f, _g;
    const editor_position = (_b = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor) == null ? void 0 : _b.getCursor("from");
    const line = (_d = (_c = this.app.workspace.activeEditor) == null ? void 0 : _c.editor) == null ? void 0 : _d.getLine(editor_position.line);
    let start_index = 0, end_index = line.length;
    for (let i = editor_position.ch - 1; i >= 0; --i) {
      if (excluded_chars.contains(line.at(i))) {
        start_index = i + 1;
        break;
      }
    }
    for (let j = editor_position.ch - 1; j < line.length; ++j) {
      if (excluded_chars.contains(line.at(j))) {
        end_index = j;
        break;
      }
    }
    const first_char = line.substring(start_index, end_index).at(0);
    if (first_char !== first_char.toUpperCase() && value.length > 1 && value.at(1) !== ((_e = value.at(1)) == null ? void 0 : _e.toUpperCase())) {
      value = value.toLowerCase();
    }
    (_g = (_f = this.app.workspace.activeEditor) == null ? void 0 : _f.editor) == null ? void 0 : _g.replaceRange(`[[${value}]]`, { line: editor_position.line, ch: start_index }, { line: editor_position.line, ch: end_index });
  }
};
var DictionaryDevDictAddition = class extends import_obsidian.EditorSuggest {
  onTrigger(cursor, editor, file) {
    const line = editor.getLine(cursor.line);
    if (line.length <= 6) {
      return null;
    }
    const open_tag_index = line.indexOf("!!!");
    const close_tag_index = line.indexOf("!!!", open_tag_index + 3);
    const definition_index = line.indexOf(": ", open_tag_index);
    if (close_tag_index - open_tag_index < 4 || open_tag_index === -1 || close_tag_index === -1 || definition_index - open_tag_index < 4 || close_tag_index - definition_index <= 0) {
      return null;
    }
    return {
      start: { line: cursor.line, ch: open_tag_index },
      end: { line: cursor.line, ch: close_tag_index },
      query: line.substring(open_tag_index + 3, close_tag_index)
    };
  }
  getSuggestions(context) {
    return new Promise((resolve, reject) => {
      resolve([context.query]);
    });
  }
  renderSuggestion(value, el) {
    el.appendText(`Create Term: ${value.substring(0, value.indexOf(": "))}`);
  }
  selectSuggestion(value, evt) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const file_path = (_b = this.app.workspace.activeEditor) == null ? void 0 : _b.file.path.substring(0, ((_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file.path.length) - 3);
    new import_obsidian.Notice(file_path);
    const name = value.substring(0, value.indexOf(": "));
    const description = value.substring(value.indexOf(": ") + 2);
    if (!this.app.vault.getFolderByPath(`${dictionary_name}/${file_path}`)) {
      this.app.vault.createFolder(`${dictionary_name}/${file_path}`);
    }
    this.app.vault.create(`${dictionary_name}/${file_path}/${name}.md`, description);
    const editor_position = (_d = (_c = this.app.workspace.activeEditor) == null ? void 0 : _c.editor) == null ? void 0 : _d.getCursor("from");
    const line = (_f = (_e = this.app.workspace.activeEditor) == null ? void 0 : _e.editor) == null ? void 0 : _f.getLine(editor_position.line);
    const open_tag_index = line.indexOf("!!!");
    const close_tag_index = line.indexOf("!!!", open_tag_index + 3);
    (_h = (_g = this.app.workspace.activeEditor) == null ? void 0 : _g.editor) == null ? void 0 : _h.replaceRange(`[[${name}]]`, { line: editor_position.line, ch: open_tag_index }, { line: editor_position.line, ch: close_tag_index + 3 });
  }
};
var DictionaryDev = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    let dictionary = this.app.vault.getFolderByPath(dictionary_name);
    if (!dictionary) {
      this.app.vault.createFolder(dictionary_name);
    }
    dictionary = this.app.vault.getFolderByPath(dictionary_name);
    let terms = dictionary.children;
    for (let i = 0; i < terms.length; ++i) {
      const term = terms[i];
      if (term instanceof import_obsidian.TFolder) {
        terms = terms.concat(term.children);
        continue;
      }
      dictionary_terms.push(term.name.substring(0, term.name.length - 3));
    }
    this.registerEditorSuggest(new DictionaryDevAutocomplete(this.app));
    this.registerEditorSuggest(new DictionaryDevDictAddition(this.app));
    this.registerEvent(this.app.vault.on("create", (file) => {
      if (file.path.includes(dictionary.name) && !dictionary_terms.contains(file.name.substring(0, file.name.length - 3))) {
        dictionary_terms.push(file.name.substring(0, file.name.length - 3));
      }
    }));
    this.registerEvent(this.app.vault.on("rename", (file, oldPath) => {
      dictionary_terms.remove(oldPath.substring(oldPath.lastIndexOf("/") + 1, oldPath.length - 3));
      dictionary_terms.push(file.name.substring(0, file.name.length - 3));
    }));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
};
//# sourceMappingURL=data:application/json;base64,
